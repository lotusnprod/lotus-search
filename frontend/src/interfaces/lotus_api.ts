/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/references": {
    /**
     * Search references using parameters
     *
     * @description Search references using parameters. Additional parameters allow to specify the kind of search and the parameters.
     */
    post: operations["search_references"];
  };
  "/structures": {
    /**
     * Search structures using parameters
     *
     * @description Search structures. Additional parameters allow to specify the kind of search and the parameters.
     */
    post: operations["search_structures"];
  };
  "/taxa": {
    /**
     * Search taxa using parameters
     *
     * @description Search taxa using parameters. Additional parameters allow to specify the kind of search and the parameters.
     */
    post: operations["search_taxa"];
  };
  "/triplets": {
    /**
     * Search triplets using parameters
     *
     * @description Search triplets using parameters. Additional parameters allow to specify the kind of search and the parameters.
     */
    post: operations["search_triplets"];
  };
  "/autocomplete/taxa": {
    /**
     * Autocomplete taxa names when given a portion of the name
     *
     * @description Autocomplete taxa names when given a portion of the name.
     */
    post: operations["autocomplete_taxa"];
  };
  "/depiction/structure": {
    /**
     * Depict a structure as SVG
     *
     * @description Depict a structure as SVG
     */
    post: operations["depiction_structure"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Item: components["schemas"]["item"];
    ReferenceResult: components["schemas"]["referenceResult"];
    StructureResult: components["schemas"]["structureResult"];
    TaxonResult: components["schemas"]["taxonResult"];
    TripletResult: components["schemas"]["tripletResult"];
    HTTPValidationError: components["schemas"]["validationError"];
    /** StructureOption */
    structureOption: {
      /**
       * @description Search by substructure.
       *
       * @default false
       * @example false
       */
      substructure_search?: boolean;
      /**
       * @description Similarity level cut-off (basic tanimoto-like search). Does nothing is substructure_search is true.
       *
       * @default 1
       * @example 0.8
       */
      similarity_level?: number;
    };
    /** StructureItem */
    structureItem: {
      /**
       * @description Wikidata identifier of the structure (without the Q).
       *
       * @default null
       * @example 3613679
       */
      wid?: number;
      /**
       * @description A MOL file or SMILES of the structure of the structure or part of it.
       *
       * @default null
       * @example C=C[C@@H]1[C@@H]2CCOC(=O)C2=CO[C@H]1O[C@H]3[C@@H]([C@H]([C@@H]([C@H](O3)CO)O)O)OC(=O)C4=C(C=C(C=C4C5=CC(=CC=C5)O)O)O
       */
      molecule?: string;
      option?: components["schemas"]["structureOption"];
    };
    /** TaxonOption */
    taxonOption: {
      /**
       * @description Whether to include the children of the taxon.
       *
       * @default true
       * @example true
       */
      taxon_children?: boolean;
    };
    /** TaxonItem */
    taxonItem: {
      /**
       * @description Wikidata identifier of the taxon (without the Q).
       *
       * @default null
       * @example 158572
       */
      wid?: number;
      /**
       * @description The name searched (can be partial and slightly incorrect).
       *
       * @default null
       * @example Gentiana luteha
       */
      name?: string;
      option?: components["schemas"]["taxonOption"];
    };
    /**
     * Limit
     * @description Limit to n results.
     *
     * @default false
     * @example 1000
     */
    limit: number;
    /** Item */
    item: {
      structure?: components["schemas"]["structureItem"];
      taxon?: components["schemas"]["taxonItem"];
      limit?: components["schemas"]["limit"];
    };
    /** ReferenceObject */
    referenceObject: {
      /**
       * @description DOI
       *
       * @example 10.1080/1057563021000040466
       */
      doi?: string;
    };
    /** ReferenceResult */
    referenceResult: {
      /**
       * @description IDs
       *
       * @example [
       *   44488598
       * ]
       */
      ids: number[];
      objects?: components["schemas"]["referenceObject"];
      /** @description Count */
      count?: number;
      /** @description Description */
      description?: string;
    };
    /** StructureObject */
    structureObject: {
      /**
       * @description Structure SMILES
       *
       * @example C=C[C@@H]1[C@@H]2CCOC(=O)C2=CO[C@H]1O[C@H]3[C@@H]([C@H]([C@@H]([C@H](O3)CO)O)O)O
       */
      smiles?: string;
    };
    /** StructureResult */
    structureResult: {
      /**
       * @description IDs
       *
       * @example [
       *   27151406
       * ]
       */
      ids: number[];
      objects?: components["schemas"]["structureObject"];
      /** @description Count */
      count?: number;
      /** @description Description */
      description?: string;
    };
    /** TaxonObject */
    taxonObject: {
      /**
       * @description Name
       *
       * @example Gentiana lutea
       */
      name?: string;
    };
    /** TaxonResult */
    taxonResult: {
      /**
       * @description IDs
       *
       * @example [
       *   158572
       * ]
       */
      ids: number[];
      objects?: components["schemas"]["taxonObject"];
      /** @description Count */
      count?: number;
      /** @description Description */
      description?: string;
    };
    /** TripletResult */
    tripletResult: {
      /**
       * Triplets
       * @description Triplets of reference, structure and taxon IDs
       *
       * @example [
       *   [
       *     44488598,
       *     27151406,
       *     158572
       *   ]
       * ]
       */
      triplets: number[][];
      references?: components["schemas"]["referenceObject"];
      structures?: components["schemas"]["structureObject"];
      taxa?: components["schemas"]["taxonObject"];
      /** @description Count */
      count?: number;
      /** @description Description */
      description?: string;
    };
    /** Taxa */
    taxaQuery: {
      /** @example Taxus */
      taxon_name?: string;
    };
    /**
     * TaxaResult
     * @example {
     *   "Taxus baccata": 1340928,
     *   "Taxus floridana": 1340929
     * }
     */
    taxaResult: {
      [key: string]: number;
    };
    depictStructureQuery: {
      /** @description A SMILES string to depict. */
      structure?: string;
      /**
       * @description A SMILES string to highlight in the structure. If not provided, the
       * structure will be depicted without highlighting.
       */
      highlight?: null | string;
    };
    depictStructureResponse: {
      /** @description The SVG depiction of the structure. */
      svg?: string;
    };
    /** HTTPValidationError */
    validationError: {
      /** Location */
      loc: unknown;
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Search references using parameters
   *
   * @description Search references using parameters. Additional parameters allow to specify the kind of search and the parameters.
   */
  search_references: {
    /** @description Query */
    requestBody: {
      content: {
        "application/json": components["schemas"]["item"];
      };
    };
    responses: {
      /** @description At least one reference matching the given search could be found */
      200: {
        content: {
          "application/json": components["schemas"]["referenceResult"];
        };
      };
      /** @description No reference matching the given search could be found */
      404: {
        content: {
          "application/json": {
            /** @example No reference matching the given search could be found */
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Search structures using parameters
   *
   * @description Search structures. Additional parameters allow to specify the kind of search and the parameters.
   */
  search_structures: {
    /** @description Query */
    requestBody: {
      content: {
        "application/json": components["schemas"]["item"];
      };
    };
    responses: {
      /** @description At least one structure matching the given search could be found */
      200: {
        content: {
          "application/json": components["schemas"]["structureResult"];
        };
      };
      /** @description No structure matching the given query search be found */
      404: {
        content: {
          "application/json": {
            /** @example No structure matching the given search could be found */
            message?: string;
          };
        };
      };
      /** @description The structure given is invalid */
      500: {
        content: {
          "application/json": {
            /** @example The structure given is invalid */
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Search taxa using parameters
   *
   * @description Search taxa using parameters. Additional parameters allow to specify the kind of search and the parameters.
   */
  search_taxa: {
    /** @description Query */
    requestBody: {
      content: {
        "application/json": components["schemas"]["item"];
      };
    };
    responses: {
      /** @description At least one taxon matching the given search could be found */
      200: {
        content: {
          "application/json": components["schemas"]["taxonResult"];
        };
      };
      /** @description No taxon matching the given search could be found */
      404: {
        content: {
          "application/json": {
            /** @example No taxon matching the given search could be found */
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Search triplets using parameters
   *
   * @description Search triplets using parameters. Additional parameters allow to specify the kind of search and the parameters.
   */
  search_triplets: {
    /** @description Query */
    requestBody: {
      content: {
        "application/json": components["schemas"]["item"];
      };
    };
    responses: {
      /** @description At least one triplet matching the given search could be found */
      200: {
        content: {
          "application/json": components["schemas"]["tripletResult"];
        };
      };
      /** @description No triplet matching the given search could be found */
      404: {
        content: {
          "application/json": {
            /** @example No triplet matching the given search could be found */
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Autocomplete taxa names when given a portion of the name
   *
   * @description Autocomplete taxa names when given a portion of the name.
   */
  autocomplete_taxa: {
    /** @description Query */
    requestBody: {
      content: {
        "application/json": components["schemas"]["taxaQuery"];
      };
    };
    responses: {
      /** @description Matching taxa */
      200: {
        content: {
          "application/json": components["schemas"]["taxaResult"];
        };
      };
      /** @description Invalid query */
      400: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Depict a structure as SVG
   *
   * @description Depict a structure as SVG
   */
  depiction_structure: {
    /** @description depictStructureQuery */
    requestBody: {
      content: {
        "application/json": components["schemas"]["depictStructureQuery"];
      };
    };
    responses: {
      /** @description structure depiction */
      200: {
        content: {
          "application/json": components["schemas"]["depictStructureResponse"];
        };
      };
      /** @description Probably some failure */
      400: {
        content: {
          "application/json": string;
        };
      };
    };
  };
}
