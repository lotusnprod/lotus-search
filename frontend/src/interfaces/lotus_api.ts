/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/references": {
    /**
     * Search references using parameters
     *
     * @description Search references using parameters. Additional parameters allow to specify the kind of search and the parameters.
     */
    post: operations["search_references"];
  };
  "/structures": {
    /**
     * Search structures using parameters
     *
     * @description Search structures. Additional parameters allow to specify the kind of search and the parameters.
     */
    post: operations["search_structures"];
  };
  "/taxa": {
    /**
     * Search taxa using parameters
     *
     * @description Search taxa using parameters. Additional parameters allow to specify the kind of search and the parameters.
     */
    post: operations["search_taxa"];
  };
  "/triplets": {
    /**
     * Search triplets using parameters
     *
     * @description Search triplets using parameters. Additional parameters allow to specify the kind of search and the parameters.
     */
    post: operations["search_triplets"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Item: components["schemas"]["item"];
    ReferenceResult: components["schemas"]["referenceResult"];
    StructureResult: components["schemas"]["structureResult"];
    TaxonResult: components["schemas"]["taxonResult"];
    TripletResult: components["schemas"]["tripletResult"];
    HTTPValidationError: components["schemas"]["validationError"];
    /** Item */
    item: {
      /**
       * @description Wikidata identifier of the structure (without the Q).
       *
       * @default null
       * @example 3613679
       */
      structure_wid?: number;
      /**
       * @description A MOL file or SMILES of the structure of the structure or part of it.
       *
       * @default null
       * @example C=C[C@@H]1[C@@H]2CCOC(=O)C2=CO[C@H]1O[C@H]3[C@@H]([C@H]([C@@H]([C@H](O3)CO)O)O)OC(=O)C4=C(C=C(C=C4C5=CC(=CC=C5)O)O)O
       */
      structure?: string;
      /**
       * @description Search by substructure.
       *
       * @default false
       * @example false
       */
      substructure_search?: boolean;
      /**
       * @description Similarity level cut-off (basic tanimoto-like search). Does nothing is substructure_search is true.
       *
       * @default 1
       * @example 0.8
       */
      similarity_level?: number;
      /**
       * @description Wikidata identifier of the taxon (without the Q).
       *
       * @default null
       * @example 158572
       */
      taxon_wid?: number;
      /**
       * @description The name searched (can be partial and slightly incorrect).
       *
       * @default null
       * @example Gentiana luteha
       */
      taxon_name?: string;
    };
    /**
     * References
     * @description References
     */
    references: {
      /**
       * DOI
       * @description DOI
       *
       * @example 10.1080/1057563021000040466
       */
      doi?: string;
      /**
       * Title
       * @description Title
       *
       * @example Iridoids from Seeds of Gentiana Lutea
       */
      title?: string;
    };
    /** ReferenceResult */
    referenceResult: {
      /**
       * IDs
       * @description IDs
       */
      ids?: {
          /** @example 44488598 */
          reference?: number;
          /** @example 27151406 */
          structure?: number;
          /** @example 158572 */
          taxon?: number;
        }[];
      /**
       * References
       * @description References
       */
      references?: {
        /** @example 44488598 */
        ids?: number;
        references?: components["schemas"]["references"];
      };
      /**
       * Count
       * @description Count
       */
      count?: number;
      /**
       * Description
       * @description Description
       */
      description?: string;
    };
    /**
     * Structures
     * @description Structures
     */
    structures: {
      /**
       * Structure SMILES
       * @description Structure SMILES
       *
       * @example C=C[C@@H]1[C@@H]2CCOC(=O)C2=CO[C@H]1O[C@H]3[C@@H]([C@H]([C@@H]([C@H](O3)CO)O)O)O
       */
      smiles?: string;
    };
    /** StructureResult */
    structureResult: {
      /**
       * IDs
       * @description IDs
       *
       * @example [
       *   27151406
       * ]
       */
      ids?: unknown[];
      /**
       * Structures
       * @description Structures
       */
      structures?: {
        [key: string]: components["schemas"]["structures"];
      };
      /**
       * Count
       * @description Count
       */
      count?: number;
      /**
       * Description
       * @description Description
       */
      description?: string;
    };
    /**
     * Taxa
     * @description Taxa
     */
    taxa: {
      /**
       * Name
       * @description Name
       *
       * @example Gentiana lutea
       */
      name?: string;
    };
    /** TaxonResult */
    taxonResult: {
      /**
       * IDs
       * @description IDs
       *
       * @example [
       *   158572
       * ]
       */
      ids?: unknown[];
      /**
       * Taxa
       * @description Taxa
       */
      taxa?: {
        /** @example 158572 */
        ids?: number;
        taxa?: components["schemas"]["taxa"];
      };
      /**
       * Count
       * @description Count
       */
      count?: number;
      /**
       * Description
       * @description Description
       */
      description?: string;
    };
    /** TripletResult */
    tripletResult: {
      /**
       * IDs
       * @description IDs
       */
      ids?: number[][];
      /**
       * References
       * @description References
       */
      references?: {
        /** @example 44488598 */
        ids?: number;
        references?: components["schemas"]["references"];
      };
      /**
       * Structures
       * @description Structures
       */
      structures?: {
        /** @example 27151406 */
        ids?: number;
        structures?: components["schemas"]["structures"];
      };
      /**
       * Taxa
       * @description Taxa
       */
      taxa?: {
        /** @example 158572 */
        ids?: number;
        taxa?: components["schemas"]["taxa"];
      };
      /**
       * Count
       * @description Count
       */
      count?: number;
      /**
       * Description
       * @description Description
       */
      description?: string;
    };
    /** HTTPValidationError */
    validationError: {
      /** Location */
      loc: unknown;
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Search references using parameters
   *
   * @description Search references using parameters. Additional parameters allow to specify the kind of search and the parameters.
   */
  search_references: {
    /** @description Query */
    requestBody: {
      content: {
        "application/json": components["schemas"]["item"];
      };
    };
    responses: {
      /** @description At least one reference matching the given search could be found */
      200: {
        content: {
          "application/json": components["schemas"]["referenceResult"];
        };
      };
      /** @description No reference matching the given search could be found */
      404: {
        content: {
          "application/json": {
            /** @example No reference matching the given search could be found */
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Search structures using parameters
   *
   * @description Search structures. Additional parameters allow to specify the kind of search and the parameters.
   */
  search_structures: {
    /** @description Query */
    requestBody: {
      content: {
        "application/json": components["schemas"]["item"];
      };
    };
    responses: {
      /** @description At least one structure matching the given search could be found */
      200: {
        content: {
          "application/json": components["schemas"]["structureResult"];
        };
      };
      /** @description No structure matching the given query search be found */
      404: {
        content: {
          "application/json": {
            /** @example No structure matching the given search could be found */
            message?: string;
          };
        };
      };
      /** @description The structure given is invalid */
      500: {
        content: {
          "application/json": {
            /** @example The structure given is invalid */
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Search taxa using parameters
   *
   * @description Search taxa using parameters. Additional parameters allow to specify the kind of search and the parameters.
   */
  search_taxa: {
    /** @description Query */
    requestBody: {
      content: {
        "application/json": components["schemas"]["item"];
      };
    };
    responses: {
      /** @description At least one taxon matching the given search could be found */
      200: {
        content: {
          "application/json": components["schemas"]["taxonResult"];
        };
      };
      /** @description No taxon matching the given search could be found */
      404: {
        content: {
          "application/json": {
            /** @example No taxon matching the given search could be found */
            message?: string;
          };
        };
      };
    };
  };
  /**
   * Search triplets using parameters
   *
   * @description Search triplets using parameters. Additional parameters allow to specify the kind of search and the parameters.
   */
  search_triplets: {
    /** @description Query */
    requestBody: {
      content: {
        "application/json": components["schemas"]["item"];
      };
    };
    responses: {
      /** @description At least one triplet matching the given search could be found */
      200: {
        content: {
          "application/json": components["schemas"]["tripletResult"];
        };
      };
      /** @description No triplet matching the given search could be found */
      404: {
        content: {
          "application/json": {
            /** @example No triplet matching the given search could be found */
            message?: string;
          };
        };
      };
    };
  };
}
